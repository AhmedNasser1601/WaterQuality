# -*- coding: utf-8 -*-
"""SGD Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KrN75Sg8nafOI8QRxu4K0v2w6UAtuway
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn import metrics
from sklearn.linear_model import SGDClassifier

#loading csv file
file_path ='water_potability.csv'
df=pd.read_csv(file_path)

#preprocessing
#dropping null_valued cells
df.drop_duplicates(keep='first',inplace=True)

#replacing outliers by nulls
for i in ['Chloramines']:
    q75,q25 = np.percentile(df.loc[:,i],[75,25])
    intr_qr = q75-q25

    upper = q75+(1.5*intr_qr)
    lower= q25-(1.5*intr_qr)

    df.loc[df[i] < lower,i] = np.nan
    df.loc[df[i] > upper,i] = np.nan

for i in ["Hardness"]:
    q75,q25 = np.percentile(df.loc[:,i],[75,25])
    intr_qr = q75-q25

    upper = q75+(1.5*intr_qr)
    lower = q25-(1.5*intr_qr)

    df.loc[df[i] < lower,i] = np.nan
    df.loc[df[i] > upper,i] = np.nan  

for i in ["Conductivity"]:
    q75,q25 = np.percentile(df.loc[:,i],[75,25])
    intr_qr = q75-q25

    upper = q75+(1.5*intr_qr)
    lower = q25-(1.5*intr_qr)

    df.loc[df[i] < lower,i] = np.nan
    df.loc[df[i] > upper,i] = np.nan    

for i in ["Organic_carbon"]:
    q75,q25 = np.percentile(df.loc[:,i],[75,25])
    intr_qr = q75-q25

    upper = q75+(1.5*intr_qr)
    lower = q25-(1.5*intr_qr)

    df.loc[df[i] < lower,i] = np.nan
    df.loc[df[i] > upper,i] = np.nan  

for x in ["Trihalomethanes"]:
    q75,q25 = np.percentile(df.loc[:,x],[75,25])
    intr_qr = q75-q25

    max = q75+(1.5*intr_qr)
    min = q25-(1.5*intr_qr)

    df.loc[df[x] < min,x] = np.nan
    df.loc[df[x] > max,x] = np.nan  


for x in ["Turbidity"]:
    q75,q25 = np.percentile(df.loc[:,x],[75,25])
    intr_qr = q75-q25

    max = q75+(1.5*intr_qr)
    min = q25-(1.5*intr_qr)

    df.loc[df[x] < min,x] = np.nan
    df.loc[df[x] > max,x] = np.nan 

#repacing the null values by the mean of eavery feature
df["ph"].fillna(value = df["ph"].mean(), inplace =True)
df["Hardness"].fillna(value = df["Hardness"].mean(), inplace =True)
df["Chloramines"].fillna(value = df["Chloramines"].mean(), inplace =True)
df["Conductivity"].fillna(value = df["Conductivity"].mean(), inplace =True)
df["Organic_carbon"].fillna(value = df["Organic_carbon"].mean(), inplace =True)
df["Turbidity"].fillna(value = df["Turbidity"].mean(), inplace =True)
df['Trihalomethanes'].fillna(value = df['Trihalomethanes'].mean(), inplace =True)
df["Sulfate"].fillna(value = df["Sulfate"].mean(), inplace =True)


#spliting the dataset
X = df.drop('Potability',axis=1)
Y = df.Potability

#splitting the data
X_train, X_test, y_train, y_test = train_test_split(X, Y,test_size=0.2,random_state=42)

#sgd
sgd=SGDClassifier(loss='modified_huber',shuffle=True,random_state=42)
sgd.fit(X_train,y_train)
y_pred=sgd.predict(X_test)
print("Accuracy:", metrics.accuracy_score(y_test,y_pred)*100)
