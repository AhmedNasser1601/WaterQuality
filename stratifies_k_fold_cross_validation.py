# -*- coding: utf-8 -*-
"""STRATIFIES K-FOLD CROSS VALIDATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nrl11T2aCKg5zx1cPzC9lyk3PKZ2dqNB
"""

# STRATIFIES K-FOLD CROSS VALIDATION { 10-fold 
# STRATIFIES K-FOLD CROSS VALIDATION { 10-fold 
import pandas as pd
import csv
from sklearn import preprocessing
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
import numpy as np
#loading csv file
import statistics
file_path ='/content/water_potability.csv'
df=pd.read_csv(file_path)

#preprocessing
#dropping null_valued cells
df.drop_duplicates(keep='first',inplace=True)

#replacing outliers by nulls
for i in ['Chloramines']:
    q75,q25 = np.percentile(df.loc[:,i],[75,25])
    intr_qr = q75-q25

    upper = q75+(1.5*intr_qr)
    lower= q25-(1.5*intr_qr)

    df.loc[df[i] < lower,i] = np.nan
    df.loc[df[i] > upper,i] = np.nan

for i in ["Hardness"]:
    q75,q25 = np.percentile(df.loc[:,i],[75,25])
    intr_qr = q75-q25

    upper = q75+(1.5*intr_qr)
    lower = q25-(1.5*intr_qr)

    df.loc[df[i] < lower,i] = np.nan
    df.loc[df[i] > upper,i] = np.nan  

for i in ["Conductivity"]:
    q75,q25 = np.percentile(df.loc[:,i],[75,25])
    intr_qr = q75-q25

    upper = q75+(1.5*intr_qr)
    lower = q25-(1.5*intr_qr)

    df.loc[df[i] < lower,i] = np.nan
    df.loc[df[i] > upper,i] = np.nan    

for i in ["Organic_carbon"]:
    q75,q25 = np.percentile(df.loc[:,i],[75,25])
    intr_qr = q75-q25

    upper = q75+(1.5*intr_qr)
    lower = q25-(1.5*intr_qr)

    df.loc[df[i] < lower,i] = np.nan
    df.loc[df[i] > upper,i] = np.nan  

for x in ["Trihalomethanes"]:
    q75,q25 = np.percentile(df.loc[:,x],[75,25])
    intr_qr = q75-q25

    max = q75+(1.5*intr_qr)
    min = q25-(1.5*intr_qr)

    df.loc[df[x] < min,x] = np.nan
    df.loc[df[x] > max,x] = np.nan  


for x in ["Turbidity"]:
    q75,q25 = np.percentile(df.loc[:,x],[75,25])
    intr_qr = q75-q25

    max = q75+(1.5*intr_qr)
    min = q25-(1.5*intr_qr)

    df.loc[df[x] < min,x] = np.nan
    df.loc[df[x] > max,x] = np.nan 

#repacing the null values by the mean of eavery feature
df["ph"].fillna(value = df["ph"].mean(), inplace =True)
df["Hardness"].fillna(value = df["Hardness"].mean(), inplace =True)
df["Chloramines"].fillna(value = df["Chloramines"].mean(), inplace =True)
df["Conductivity"].fillna(value = df["Conductivity"].mean(), inplace =True)
df["Organic_carbon"].fillna(value = df["Organic_carbon"].mean(), inplace =True)
df["Turbidity"].fillna(value = df["Turbidity"].mean(), inplace =True)
df['Trihalomethanes'].fillna(value = df['Trihalomethanes'].mean(), inplace =True)
df["Sulfate"].fillna(value = df["Sulfate"].mean(), inplace =True)

#splitting data
X = df.drop('Potability',axis=1)
Y = df.Potability

# Feature Scaling for input features.
scaler = preprocessing.MinMaxScaler()
x_scaled = scaler.fit_transform(X)

# Create classifier object.
lr = svm.SVC(kernel='linear')

# Create StratifiedKFold object.
skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)
accuracies= []

for train_index, test_index in skf.split(X, Y):
	x_train_fold, x_test_fold = x_scaled[train_index], x_scaled[test_index]
	y_train_fold, y_test_fold = Y[train_index], Y[test_index]
	lr.fit(x_train_fold, y_train_fold)
	accuracies.append(lr.score(x_test_fold, y_test_fold))

# Print the output.
print('List of possible accuracy:', accuracies)
print('\nMaximum Accuracy That can be obtained from this model is:',np.max(accuracies)*100, '%')
print('\nMinimum Accuracy:',np.min(accuracies)*100, '%')
print('\nOverall Accuracy:',np.mean(accuracies)*100, '%')
print('\nStandard Deviation is:',statistics.stdev(accuracies))
