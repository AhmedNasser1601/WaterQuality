# SVM-(ver3)-newData Classifier

# -*- coding: utf-8 -*-
"""water quality SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19-cWsamC90rp5xmkM7x6URe4scJ-ZUeM
"""

#svm 
#water quality dataset
import csv
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn import metrics
#from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

#loading csv file
file_path ='/content/waterQuality1.csv'
dataset=pd.read_csv(file_path)
dataset.head()
dataset.dtypes
#preprocessing 
dataset = dataset[dataset['is_safe'] != '#NUM!']
dataset['is_safe'] = dataset['is_safe'].astype(float)

dataset = dataset[dataset['ammonia'] != '#NUM!']
dataset['ammonia'] = dataset['ammonia'].astype(float)


# normalization step :
def getTheNorm ( col):
    return ( ( col-col.min())/(col.max()-col.min()))
## loop on the data fram to get the norm of the cols :
for col in  dataset.columns :
    dataset[col]= getTheNorm(dataset[col])

#svm
x = dataset.drop('is_safe', axis=1)#to designate that you want to drop a column
y =dataset.is_safe

#splitting the data
X_train, X_test, y_train, y_test = train_test_split(x, y,test_size=0.2,random_state=42)

#create the svm classifier
clf=svm.SVC(kernel='linear')

#train the model
clf.fit(X_train,y_train)
#predict the response for dataset
y_pred=clf.predict(X_test) 

#accurracy
print("Accuracy:", metrics.accuracy_score(y_test,y_pred))
